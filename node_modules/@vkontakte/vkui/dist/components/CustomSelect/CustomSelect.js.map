{"version":3,"sources":["../../../src/components/CustomSelect/CustomSelect.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { getRequiredValueByKey } from '../../helpers/getValueByKey';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { callMultiple } from '../../lib/callMultiple';\nimport { useDOM } from '../../lib/dom';\nimport type { Placement } from '../../lib/floating';\nimport { defaultFilterFn, type FilterFn } from '../../lib/select';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { preventDefault } from '../../lib/utils';\nimport {\n  CustomSelectDropdown,\n  type CustomSelectDropdownProps,\n} from '../CustomSelectDropdown/CustomSelectDropdown';\nimport { CustomSelectOption } from '../CustomSelectOption/CustomSelectOption';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport type { NativeSelectProps, SelectValue } from '../NativeSelect/NativeSelect';\nimport { NOT_SELECTED, remapFromNativeValueToSelectValue } from '../NativeSelect/NativeSelect';\nimport type { SelectType } from '../Select/Select';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden';\nimport { type CustomSelectClearButtonProps } from './CustomSelectClearButton';\nimport {\n  CustomSelectInput,\n  type CustomSelectInputProps,\n} from './CustomSelectInput/CustomSelectInput';\nimport {\n  checkMixControlledAndUncontrolledState,\n  checkOptionsValueType,\n  filter,\n  findSelectedIndex,\n  getOptionByValue,\n} from './helpers';\nimport { useAfterItems } from './hooks/useAfterItems';\nimport { useDropdownOpenedController } from './hooks/useDropdownOpenedController';\nimport { useFocusedOptionController } from './hooks/useFocusedOptionController';\nimport { useInputKeyboardController } from './hooks/useInputKeyboardController';\nimport { useInputValueController } from './hooks/useInputValueController';\nimport { useScrollListController } from './hooks/useScrollListController';\nimport { useSelectedOptionController } from './hooks/useSelectedOptionController';\nimport type {\n  CustomSelectOptionInterface,\n  CustomSelectRenderOption,\n  MousePosition,\n  PopupDirection,\n} from './types';\nimport styles from './CustomSelect.module.css';\n\nconst sizeYClassNames = {\n  none: styles.sizeYNone,\n  compact: styles.sizeYCompact,\n};\n\nfunction defaultRenderOptionFn<T extends CustomSelectOptionInterface>({\n  option,\n  ...props\n}: CustomSelectRenderOption<T>): React.ReactNode {\n  return <CustomSelectOption {...props} />;\n}\n\nfunction isMousePositionChanged(event: React.MouseEvent, prevPosition: MousePosition) {\n  return (\n    Math.abs(prevPosition.x - event.clientX) >= 1 || Math.abs(prevPosition.y - event.clientY) >= 1\n  );\n}\n\nconst FETCH_STATUS_RESET_DELAY = 2000;\n\nconst FetchingStatus = ({\n  fetching = false,\n  options,\n  fetchingInProgressLabel = 'Список опций загружается...',\n  fetchingCompletedLabel = `Загружено опций: ${options.length}`,\n}: Pick<\n  SelectProps,\n  'fetching' | 'fetchingInProgressLabel' | 'fetchingCompletedLabel' | 'options'\n>) => {\n  const [status, setStatus] = React.useState<'fetching' | 'loaded' | 'none'>('none');\n\n  const content = getRequiredValueByKey(status, {\n    fetching: fetchingInProgressLabel,\n    loaded:\n      typeof fetchingCompletedLabel === 'function'\n        ? fetchingCompletedLabel(options.length)\n        : fetchingCompletedLabel,\n    none: '',\n  });\n\n  useIsomorphicLayoutEffect(\n    function updateStatus() {\n      if (fetching) {\n        setStatus('fetching');\n      } else {\n        setStatus('loaded');\n        setTimeout(() => setStatus('none'), FETCH_STATUS_RESET_DELAY);\n      }\n    },\n    [fetching],\n  );\n\n  return <VisuallyHidden aria-live=\"polite\">{content}</VisuallyHidden>;\n};\n\nexport type { CustomSelectClearButtonProps };\n\nexport interface SelectProps<\n  OptionInterfaceT extends CustomSelectOptionInterface = CustomSelectOptionInterface,\n> extends NativeSelectProps,\n    Omit<FormFieldProps, 'maxHeight'>,\n    Pick<CustomSelectDropdownProps, 'overscrollBehavior'>,\n    Pick<CustomSelectInputProps, 'minLength' | 'maxLength' | 'pattern' | 'readOnly'> {\n  /**\n   * Ref на внутрений компонент input.\n   */\n  getSelectInputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Если `true`, то при нажатии на `CustomSelect` в нём появится текстовое поле для поиска по `options`. По умолчанию поиск\n   * производится по `option.label`.\n   */\n  searchable?: boolean;\n  /**\n   * Текст, который будет отображен, если приходит пустой `options`.\n   */\n  emptyText?: string;\n  /**\n   * Событие изменения текстового поля.\n   */\n  onInputChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  /**\n   * Список опций в списке.\n   */\n  options: OptionInterfaceT[];\n  /**\n   * Функция для кастомной фильтрации. По умолчанию поиск производится по `option.label`.\n   */\n  filterFn?: false | FilterFn<OptionInterfaceT>;\n  /**\n   * Направление раскрытия выпадающего списка.\n   */\n  popupDirection?: PopupDirection;\n  /**\n   * Рендер-проп для кастомного рендера опции.\n   * В объекте аргумента приходят [свойства опции](https://vkui.io/components/custom-select#custom-select-option-api).\n   *\n   * > ⚠️  Важно: свойство опции `disabled` должно выставляться только через проп `options`.\n   * > Запрещается выставлять `disabled` проп опциям в обход `options`, иначе `CustomSelect` не будет знать об актуальном состоянии\n   * опции.\n   */\n  renderOption?: (props: CustomSelectRenderOption<OptionInterfaceT>) => React.ReactNode;\n  /**\n   * Рендер-проп для кастомного рендера содержимого дропдауна.\n   * В `defaultDropdownContent` содержится список опций в виде скроллящегося блока.\n   */\n  renderDropdown?: ({\n    defaultDropdownContent,\n  }: {\n    defaultDropdownContent: React.ReactNode;\n  }) => React.ReactNode;\n  /**\n   * Если `true`, то в дропдауне вместо списка опций рисуется спиннер. При переданных `renderDropdown` и `fetching: true`\n   * \"победит\" `renderDropdown`.\n   */\n  fetching?: boolean;\n  /**\n   * Обработчик закрытия выпадающего списка.\n   */\n  onClose?: VoidFunction;\n  /**\n   * Обработчик открытия выпадающего списка.\n   */\n  onOpen?: VoidFunction;\n  /**\n   * Иконка раскрывающегося списка.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Кастомная кнопка для очистки значения.\n   * Должна принимать обязательное свойство `onClick`.\n   */\n  ClearButton?: React.ComponentType<CustomSelectClearButtonProps>;\n  /**\n   * Если `true`, то справа будет отображаться кнопка для очистки значения.\n   */\n  allowClearButton?: boolean;\n  /**\n   * Передает атрибут `data-testid` для кнопки очистки.\n   */\n  clearButtonTestId?: string;\n  /**\n   * Отступ от выпадающего списка.\n   */\n  dropdownOffsetDistance?: number;\n  /**\n   * Ширина раскрывающегося списка зависит от контента.\n   */\n  dropdownAutoWidth?: boolean;\n  /**\n   * Использовать Portal для рендеринга выпадающего списка.\n   */\n  forceDropdownPortal?: boolean;\n  /**\n   * Тип отображения компонента.\n   */\n  selectType?: SelectType;\n  /**\n   * Отключает максимальную высоту по умолчанию.\n   */\n  noMaxHeight?: boolean;\n  /**\n   * Передает атрибут `data-testid` для элемента, внутри которого отображается текст выбранной опции `CustomSelect` или плейсхолдер.\n   */\n  labelTextTestId?: string;\n  /**\n   * Передает атрибут `data-testid` для нативного элемента `select`.\n   */\n  nativeSelectTestId?: string;\n  /**\n   * Обработчик события `keyDown` в поле ввода.\n   */\n  onInputKeyDown?: (e: React.KeyboardEvent, isOpen: boolean) => void;\n  /**\n   * Включает режим в котором выбранное значение `CustomSelect` читается скринридерами корректно.\n   * В данном режиме введенное в поле ввода значение не сбрасывается при потере фокуса.\n   */\n  accessible?: boolean /* TODO [>=v8] включить по умолчанию */;\n  /**\n   * Текстовая метка для индикации процесса загрузки данных для пользователей скринридерами. По умолчанию: `\"Список опций загружается...\"`.\n   */\n  fetchingInProgressLabel?: string;\n  /**\n   * Текстовая метка для индикации завершения процесса загрузки данных для пользователей скринридерами. По умолчанию: `\"Загружено опций: ${options.length}\"`.\n   */\n  fetchingCompletedLabel?: string | ((optionsCount: number) => string);\n}\n\n/**\n * @see https://vkui.io/components/custom-select\n */\nexport function CustomSelect<OptionInterfaceT extends CustomSelectOptionInterface>(\n  props: SelectProps<OptionInterfaceT>,\n): React.ReactNode {\n  const {\n    before,\n    name,\n    className,\n    getRef,\n    getRootRef,\n    popupDirection = 'bottom',\n    style,\n    onChange,\n    children,\n    'onInputChange': onInputChangeProp,\n    renderDropdown,\n    onOpen,\n    onClose,\n    fetching,\n    forceDropdownPortal,\n    selectType = 'default',\n    searchable = false,\n    'renderOption': renderOptionProp = defaultRenderOptionFn,\n    'options': options,\n    emptyText = 'Ничего не найдено',\n    filterFn = defaultFilterFn,\n    'icon': iconProp,\n    ClearButton,\n    allowClearButton = false,\n    dropdownOffsetDistance = 0,\n    dropdownAutoWidth = false,\n    noMaxHeight = false,\n    'aria-labelledby': ariaLabelledBy,\n    clearButtonTestId,\n    nativeSelectTestId,\n    defaultValue,\n    required,\n    getSelectInputRef,\n    overscrollBehavior,\n    'onInputKeyDown': onInputKeyDownProp,\n    readOnly,\n    accessible = false,\n    fetchingInProgressLabel,\n    fetchingCompletedLabel,\n    ...restProps\n  } = props;\n\n  if (process.env.NODE_ENV === 'development') {\n    checkOptionsValueType(options);\n  }\n\n  const { sizeY = 'none' } = useAdaptivity();\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const handleRootRef = useExternRef(containerRef, getRootRef);\n  const selectElRef = useExternRef(getRef);\n  const selectInputRef = useExternRef(getSelectInputRef);\n\n  const propsValue = React.useMemo<SelectValue | undefined>(() => {\n    if (props.value === undefined) {\n      return undefined;\n    }\n    return getOptionByValue(options, props.value)?.value ?? null;\n  }, [options, props.value]);\n\n  const [isControlledOutside, setIsControlledOutside] = React.useState(props.value !== undefined);\n  const [popperPlacement, setPopperPlacement] = React.useState<Placement>(popupDirection);\n\n  const {\n    nativeSelectValue,\n    setNativeSelectValue,\n    selectedOptionValue,\n    setSelectedOptionValue,\n    onNativeSelectChange,\n  } = useSelectedOptionController({\n    value: propsValue,\n    defaultValue,\n    isControlledOutside,\n    allowClearButton,\n    onChange,\n  });\n\n  const selected = React.useMemo(\n    () => options.find((option) => option.value === selectedOptionValue),\n    [options, selectedOptionValue],\n  );\n\n  const { inputValue, onInputChange, resetInputValue, resetInputValueBySelectedOption } =\n    useInputValueController({\n      options,\n      accessible,\n      selectedValue: selectedOptionValue,\n      onInputChange: onInputChangeProp,\n    });\n\n  const filteredOptions = React.useMemo(\n    () => filter(options, searchable ? inputValue : '', filterFn),\n    [filterFn, inputValue, options, searchable],\n  );\n\n  const { scrollToElement, optionsWrapperRef, scrollBoxRef } = useScrollListController();\n\n  const {\n    focusedOptionValue,\n    setFocusedOptionValue,\n    resetFocusedOption,\n    focusOptionByIndex,\n    focusOption,\n    selectFocusedValue,\n  } = useFocusedOptionController({\n    selectedOptionValue,\n    filteredOptions,\n    scrollToElement,\n  });\n\n  const scrollToSelectedOption = () => {\n    scrollToElement(findSelectedIndex(filteredOptions, selectedOptionValue), true);\n  };\n\n  const { opened, open, close, toggleOpened } = useDropdownOpenedController({\n    onOpen: callMultiple(selectFocusedValue, onOpen),\n    onOpened: scrollToSelectedOption,\n    onClose,\n    onClosed: accessible ? resetInputValueBySelectedOption : resetInputValue,\n  });\n\n  React.useEffect(\n    function updateOptionsValue() {\n      const value =\n        propsValue !== undefined\n          ? propsValue\n          : remapFromNativeValueToSelectValue(nativeSelectValue);\n      setSelectedOptionValue(value);\n      setFocusedOptionValue(value);\n    },\n    [propsValue, nativeSelectValue, setFocusedOptionValue, setSelectedOptionValue],\n  );\n\n  React.useEffect(\n    function syncIsControlledState() {\n      setIsControlledOutside((oldIsControlled) => {\n        const newIsControlled = propsValue !== undefined;\n        checkMixControlledAndUncontrolledState(oldIsControlled, newIsControlled);\n        return newIsControlled;\n      });\n    },\n    [propsValue],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (\n      filteredOptions.some(({ value }) => nativeSelectValue === value) ||\n      (allowClearButton && nativeSelectValue === NOT_SELECTED.NATIVE)\n    ) {\n      const event = new Event('change', { bubbles: true });\n\n      selectElRef.current?.dispatchEvent(event);\n    }\n  }, [nativeSelectValue]);\n\n  const openedClassNames = React.useMemo(\n    () =>\n      (opened &&\n        dropdownOffsetDistance === 0 &&\n        (popperPlacement.includes('top') ? styles.popUp : styles.popDown)) ||\n      undefined,\n    [dropdownOffsetDistance, opened, popperPlacement],\n  );\n\n  const selectOption = React.useCallback(\n    (value: Exclude<SelectValue, null>) => {\n      setNativeSelectValue(value ?? NOT_SELECTED.NATIVE);\n      close();\n\n      const shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync =\n        isControlledOutside && propsValue !== nativeSelectValue && nativeSelectValue === value;\n\n      if (shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync) {\n        const event = new Event('change', { bubbles: true });\n        selectElRef.current?.dispatchEvent(event);\n      }\n    },\n    [close, setNativeSelectValue, isControlledOutside, propsValue, nativeSelectValue, selectElRef],\n  );\n\n  const selectFocused = React.useCallback(() => {\n    if (focusedOptionValue === null) {\n      return;\n    }\n\n    selectOption(focusedOptionValue);\n  }, [focusedOptionValue, selectOption]);\n\n  const onInputKeyDown = useInputKeyboardController({\n    opened,\n    open,\n    close,\n    resetFocusedOption,\n    selectFocused,\n    focusOption,\n    scrollBoxRef,\n    onInputKeyDown: onInputKeyDownProp,\n  });\n\n  const onBlur = React.useCallback(() => {\n    close();\n    const event = new Event('focusout', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n  }, [close, selectElRef]);\n\n  const onFocus = React.useCallback(() => {\n    const event = new Event('focusin', { bubbles: true });\n    selectElRef.current?.dispatchEvent(event);\n  }, [selectElRef]);\n\n  const handleOptionClick = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      const index = Array.prototype.indexOf.call(\n        e.currentTarget.parentNode?.children,\n        e.currentTarget,\n      );\n      const option = filteredOptions[index];\n\n      if (option && !option.disabled) {\n        selectOption(option.value);\n      }\n    },\n    [filteredOptions, selectOption],\n  );\n\n  const lastMousePositionRef = React.useRef<MousePosition>({ x: 0, y: 0 });\n  const focusOptionOnMouseMove = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>, index: number) => {\n      if (isMousePositionChanged(e, lastMousePositionRef.current)) {\n        focusOptionByIndex(index, false);\n      }\n    },\n    [focusOptionByIndex],\n  );\n\n  const popupAriaId = React.useId();\n  const renderOption = React.useCallback(\n    (option: OptionInterfaceT, index: number) => {\n      const hovered = option.value === focusedOptionValue;\n      const selected = option.value === selectedOptionValue;\n\n      return (\n        <React.Fragment key={`${typeof option.value}-${option.value}`}>\n          {renderOptionProp({\n            option,\n            hovered,\n            children: option.label,\n            selected,\n            disabled: option.disabled,\n            onClick: handleOptionClick,\n            onMouseDown: preventDefault,\n            // Используем `onMouseMove` вместо `onMouseEnter/onMouseOver`.\n            // Потому что если при навигации с клавиатуры курсор наведён на\n            // список, то при первом автоматическом скролле списка вызывается событие MouseOver/MouseEnter\n            // обработчик которого фокусирует опцию под курсором, хотя при навигация с клавиатуры пользователь мог уйти дальше по списку, это путает.\n            // Причём координаты события меняются на пару пикселей по сравнению с прошлым вызовом,\n            // а значит нельзя на них опираться, чтобы запретить обработку такого события.\n            // C mousemove такой проблемы нет, что позволяет реализовать поведение при наведении с клавиатуры и при наведении мышью идентично `<select>`.\n            onMouseMove: (e) => focusOptionOnMouseMove(e, index),\n            id: `${popupAriaId}-${option.value}`,\n            ...option,\n          })}\n        </React.Fragment>\n      );\n    },\n    [\n      focusedOptionValue,\n      selectedOptionValue,\n      renderOptionProp,\n      handleOptionClick,\n      popupAriaId,\n      focusOptionOnMouseMove,\n    ],\n  );\n\n  const resolvedContent = React.useMemo(() => {\n    const defaultDropdownContent =\n      filteredOptions.length > 0 ? (\n        <div ref={optionsWrapperRef}>{filteredOptions.map(renderOption)}</div>\n      ) : (\n        <Footnote className={styles.empty}>{emptyText}</Footnote>\n      );\n\n    if (typeof renderDropdown === 'function') {\n      return renderDropdown({ defaultDropdownContent });\n    } else {\n      return defaultDropdownContent;\n    }\n  }, [emptyText, filteredOptions, optionsWrapperRef, renderDropdown, renderOption]);\n\n  const afterItems = useAfterItems({\n    value: propsValue,\n    nativeSelectValue,\n    isControlledOutside,\n    opened,\n    allowClearButton,\n    ClearButton,\n    onClearButtonClick: () => {\n      setNativeSelectValue(NOT_SELECTED.NATIVE);\n      resetInputValue();\n      selectInputRef.current && selectInputRef.current.focus();\n    },\n    clearButtonTestId,\n    disabled: restProps.disabled,\n    readOnly,\n    icon: iconProp,\n  });\n\n  const { document } = useDOM();\n  const passClickAndFocusToInputOnClick = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      // Раньше внешней оберткой CustomSelect был <label>, что позволяло по клику в любую область CustomSelect,\n      // даже где нету интерактивного элемента, фокусировать <input> и передавать на него событие клика.\n      // Так как мы больше не оборачиваем CustomSelect в <label>, то для обертки CustomSelect мы симулируем работу <label>.\n      // передаем фокус и клик по <input>, если пользователь кликнул в зоне обертки.\n      // В <label> мы не больше не оборачиваем, потому что это заставляет скринридер\n      // дважды произносить текст выбранной опции при фокусе, если CustomSelect связан с внешним <label>.\n      // Воспроизводится в некоторых версиях Chrome, при навигации по странице с помощью стрелок.\n      // Договорились со специалистом по доступности убрать <label>-обёртки из Select и CustomSelect\n\n      if (!selectInputRef.current || !document) {\n        return;\n      }\n\n      const clickTargetIsNotAnInput = e.target !== selectInputRef.current;\n      if (clickTargetIsNotAnInput) {\n        selectInputRef.current.click();\n\n        const inputIsNotFocused = document.activeElement !== selectInputRef.current;\n        if (inputIsNotFocused) {\n          selectInputRef.current.focus();\n        }\n      }\n    },\n    [document, selectInputRef],\n  );\n\n  const preventInputBlurWhenClickInsideFocusedSelectArea = (\n    e: React.MouseEvent<HTMLDivElement>,\n  ) => {\n    // Так как инпут больше не оборачивается пустым лэйблом, то клик внутри обертки,\n    // но вне инпута (например по иконке дропдауна), будет убирать фокус с инпута.\n    // Чтобы в такой ситуации отключить blur инпута мы превентим mousedown событие обёртки\n    const isInputFocused = document && document.activeElement === selectInputRef.current;\n    if (isInputFocused) {\n      e.preventDefault();\n    }\n  };\n\n  const ariaActiveDescendantId = focusedOptionValue !== null ? focusedOptionValue : undefined;\n\n  const selectInputAriaProps: React.HTMLAttributes<HTMLElement> = {\n    'role': 'combobox',\n    'aria-controls': popupAriaId,\n    'aria-expanded': opened,\n    'aria-activedescendant':\n      ariaActiveDescendantId && opened ? `${popupAriaId}-${ariaActiveDescendantId}` : undefined,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-haspopup': 'listbox',\n    'aria-autocomplete': 'none',\n  };\n\n  const resetOptionFocusOnMouseLeave = React.useCallback(\n    (event: React.MouseEvent) => {\n      // В Хроме eсли мышка пользователя находится над инпутом селекта,\n      // и он с клавиатуры открывает опции, причём одна из опций\n      // уже выбрана, то видно, как выбранная опция получает фокус,\n      // но потом сразу же его теряет.\n      // Связано это с тем, что в этот момент вызывается onMouseLeave, на который у нас\n      // завязан сброс состония фокуса у опции. По хорошему фокус должен оставаться.\n      // Нам не интересен вызов onMouseLeave если мышка при этом не двигалась.\n      if (isMousePositionChanged(event, lastMousePositionRef.current)) {\n        resetFocusedOption();\n      }\n    },\n    [resetFocusedOption],\n  );\n\n  return (\n    <div\n      className={classNames(styles.host, sizeY !== 'regular' && sizeYClassNames[sizeY], className)}\n      style={style}\n      ref={handleRootRef}\n      onClick={passClickAndFocusToInputOnClick}\n      onMouseDown={preventInputBlurWhenClickInsideFocusedSelectArea}\n      onMouseMove={function updateLastMousePosition(e) {\n        lastMousePositionRef.current = { x: e.clientX, y: e.clientY };\n      }}\n    >\n      <CustomSelectInput\n        autoComplete=\"off\"\n        autoCapitalize=\"none\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        {...restProps}\n        {...selectInputAriaProps}\n        getRef={selectInputRef}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        className={openedClassNames}\n        readOnly={readOnly || !searchable}\n        fetching={fetching}\n        searchable={searchable}\n        accessible={accessible}\n        value={inputValue}\n        onKeyDown={!readOnly ? onInputKeyDown : undefined}\n        onChange={onInputChange}\n        onClick={!readOnly ? toggleOpened : undefined}\n        before={before}\n        after={afterItems}\n        selectType={selectType}\n      >\n        {selected?.label}\n      </CustomSelectInput>\n\n      <FetchingStatus\n        fetching={fetching}\n        options={filteredOptions}\n        fetchingInProgressLabel={fetchingInProgressLabel}\n        fetchingCompletedLabel={fetchingCompletedLabel}\n      />\n      <select\n        tabIndex={-1}\n        ref={selectElRef}\n        name={name}\n        onChange={onNativeSelectChange}\n        onBlur={props.onBlur}\n        onFocus={props.onFocus}\n        onClick={props.onClick}\n        value={nativeSelectValue}\n        aria-hidden\n        className={styles.control}\n        data-testid={nativeSelectTestId}\n        required={required}\n      >\n        {(allowClearButton || nativeSelectValue === NOT_SELECTED.NATIVE) && (\n          <option key={NOT_SELECTED.NATIVE} value={NOT_SELECTED.NATIVE} />\n        )}\n        {options.map((item) => (\n          <option key={`${item.value}`} value={item.value} />\n        ))}\n      </select>\n      {opened && (\n        <CustomSelectDropdown\n          targetRef={containerRef}\n          placement={popperPlacement}\n          scrollBoxRef={scrollBoxRef}\n          onPlacementChange={setPopperPlacement}\n          onMouseLeave={resetOptionFocusOnMouseLeave}\n          fetching={fetching}\n          overscrollBehavior={overscrollBehavior}\n          offsetDistance={dropdownOffsetDistance}\n          autoWidth={dropdownAutoWidth}\n          forcePortal={forceDropdownPortal}\n          noMaxHeight={noMaxHeight}\n          role=\"listbox\"\n          id={popupAriaId}\n          aria-labelledby={ariaLabelledBy}\n          tabIndex={-1}\n        >\n          {resolvedContent}\n        </CustomSelectDropdown>\n      )}\n    </div>\n  );\n}\n"],"names":["React","classNames","getRequiredValueByKey","useAdaptivity","useExternRef","callMultiple","useDOM","defaultFilterFn","useIsomorphicLayoutEffect","preventDefault","CustomSelectDropdown","CustomSelectOption","NOT_SELECTED","remapFromNativeValueToSelectValue","Footnote","VisuallyHidden","CustomSelectInput","checkMixControlledAndUncontrolledState","checkOptionsValueType","filter","findSelectedIndex","getOptionByValue","useAfterItems","useDropdownOpenedController","useFocusedOptionController","useInputKeyboardController","useInputValueController","useScrollListController","useSelectedOptionController","sizeYClassNames","none","compact","defaultRenderOptionFn","option","props","isMousePositionChanged","event","prevPosition","Math","abs","x","clientX","y","clientY","FETCH_STATUS_RESET_DELAY","FetchingStatus","fetching","options","fetchingInProgressLabel","fetchingCompletedLabel","length","status","setStatus","useState","content","loaded","updateStatus","setTimeout","aria-live","CustomSelect","before","name","className","getRef","getRootRef","popupDirection","style","onChange","children","onInputChangeProp","renderDropdown","onOpen","onClose","forceDropdownPortal","selectType","searchable","renderOptionProp","emptyText","filterFn","iconProp","ClearButton","allowClearButton","dropdownOffsetDistance","dropdownAutoWidth","noMaxHeight","ariaLabelledBy","clearButtonTestId","nativeSelectTestId","defaultValue","required","getSelectInputRef","overscrollBehavior","onInputKeyDownProp","readOnly","accessible","restProps","process","env","NODE_ENV","sizeY","containerRef","useRef","handleRootRef","selectElRef","selectInputRef","propsValue","useMemo","value","undefined","isControlledOutside","setIsControlledOutside","popperPlacement","setPopperPlacement","nativeSelectValue","setNativeSelectValue","selectedOptionValue","setSelectedOptionValue","onNativeSelectChange","selected","find","inputValue","onInputChange","resetInputValue","resetInputValueBySelectedOption","selectedValue","filteredOptions","scrollToElement","optionsWrapperRef","scrollBoxRef","focusedOptionValue","setFocusedOptionValue","resetFocusedOption","focusOptionByIndex","focusOption","selectFocusedValue","scrollToSelectedOption","opened","open","close","toggleOpened","onOpened","onClosed","useEffect","updateOptionsValue","syncIsControlledState","oldIsControlled","newIsControlled","some","NATIVE","Event","bubbles","current","dispatchEvent","openedClassNames","includes","selectOption","useCallback","shouldTriggerOnChangeWhenControlledAndInnerValueIsOutOfSync","selectFocused","onInputKeyDown","onBlur","onFocus","handleOptionClick","e","index","Array","prototype","indexOf","call","currentTarget","parentNode","disabled","lastMousePositionRef","focusOptionOnMouseMove","popupAriaId","useId","renderOption","hovered","Fragment","label","onClick","onMouseDown","onMouseMove","id","resolvedContent","defaultDropdownContent","div","ref","map","afterItems","onClearButtonClick","focus","icon","document","passClickAndFocusToInputOnClick","clickTargetIsNotAnInput","target","click","inputIsNotFocused","activeElement","preventInputBlurWhenClickInsideFocusedSelectArea","isInputFocused","ariaActiveDescendantId","selectInputAriaProps","resetOptionFocusOnMouseLeave","updateLastMousePosition","autoComplete","autoCapitalize","autoCorrect","spellCheck","onKeyDown","after","select","tabIndex","aria-hidden","data-testid","item","targetRef","placement","onPlacementChange","onMouseLeave","offsetDistance","autoWidth","forcePortal","role","aria-labelledby"],"mappings":"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"}
{"version":3,"sources":["../../../../../src/components/CustomSelect/hooks/useSelectedOptionController.ts"],"sourcesContent":["import { type ChangeEvent } from 'react';\nimport * as React from 'react';\nimport { useStateWithPrev } from '../../../hooks/useStateWithPrev';\nimport {\n  type NativeSelectValue,\n  NOT_SELECTED,\n  remapFromNativeValueToSelectValue,\n  remapFromSelectValueToNativeValue,\n  type SelectValue,\n} from '../../NativeSelect/NativeSelect';\nimport { type SelectProps } from '../CustomSelect';\n\n/* eslint-disable jsdoc/require-jsdoc */\ntype UseSelectedOptionControllerProps = Pick<SelectProps, 'value' | 'defaultValue'> & {\n  isControlledOutside: boolean;\n  allowClearButton: boolean;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>, newValue: SelectValue) => void;\n};\n/* eslint-enable jsdoc/require-jsdoc */\n\nexport function useSelectedOptionController({\n  value,\n  defaultValue,\n  isControlledOutside,\n  allowClearButton,\n  onChange,\n}: UseSelectedOptionControllerProps) {\n  const [[nativeSelectValue, prevNativeSelectValue], setNativeSelectValue] =\n    useStateWithPrev<NativeSelectValue>(() => {\n      if (value !== undefined) {\n        return remapFromSelectValueToNativeValue(value);\n      }\n      if (defaultValue !== undefined) {\n        return remapFromSelectValueToNativeValue(defaultValue);\n      }\n      return NOT_SELECTED.NATIVE;\n    });\n  const nativeSelectValueRef = React.useRef<NativeSelectValue>(nativeSelectValue);\n\n  const [selectedOptionValue, setSelectedOptionValue] = React.useState<SelectValue>(() =>\n    remapFromNativeValueToSelectValue(nativeSelectValue),\n  );\n\n  const _setNativeSelectValue = React.useCallback(\n    (newValue: NativeSelectValue) => {\n      setNativeSelectValue(newValue);\n      nativeSelectValueRef.current = newValue;\n    },\n    [setNativeSelectValue],\n  );\n\n  React.useEffect(\n    function syncNativeSelectValueWithPropValue() {\n      if (value !== undefined) {\n        _setNativeSelectValue(remapFromSelectValueToNativeValue(value));\n      }\n    },\n    [value, _setNativeSelectValue],\n  );\n\n  React.useEffect(\n    function syncNativeSelectValueWithSelectedOptionValue() {\n      const remappedSelectedValue = remapFromSelectValueToNativeValue(selectedOptionValue);\n      if (nativeSelectValueRef.current !== remappedSelectedValue) {\n        setNativeSelectValue(remappedSelectedValue);\n      }\n    },\n    [selectedOptionValue, setNativeSelectValue],\n  );\n\n  const onNativeSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (e) => {\n    // для ситуаций, когда в опциях value это string а value/defaultValue это number\n    // и наоборот, приводим значение nativeSelectValue из стейта к строке.\n    // ведь nativeSelect всегда возвращает string в onChange, а пользователь\n    // может использовать number для опций\n    //\n    // native select всегда возвращает string в качестве value в onChange\n    // Когда селект контролируемый, то пользователь, в onChange может сохранить в свой стейт строку (например '3'), хотя\n    // в качестве value опции может использовать число (3),\n    // тогда строчное значение value ('3') из стейта пользователя\n    // будет передано в CustomSelect, и после синхронизации nativeSelectValue (3) и props.value ('3') и после клика на уже выбранную опцию (3),\n    // когда nativeSelectValue обновится на значение опции (число 3),\n    // сравнение nativeSelectValue (3) и prevNativeSelectValue ('3') может не сработать лишь из-за того, что они в разных типах.\n    const convertedNativeSelectValue =\n      typeof nativeSelectValue === 'number' &&\n      (typeof value === 'string' || typeof prevNativeSelectValue === 'string')\n        ? String(nativeSelectValue)\n        : nativeSelectValue;\n\n    const isCalledWithSameControlledOptionValue =\n      isControlledOutside &&\n      value === remapFromNativeValueToSelectValue(convertedNativeSelectValue);\n\n    const isNativeValueChanged =\n      convertedNativeSelectValue !== prevNativeSelectValue && prevNativeSelectValue !== undefined;\n\n    const isTriggeredByClearButton =\n      allowClearButton &&\n      // Проверяем, что новое значение NOT_SELECTED.NATIVE\n      nativeSelectValue === NOT_SELECTED.NATIVE &&\n      // Проверяем, что предыдущее значение не undefined(кейс с первой отрисовкой, когда предыдущего значения не было)\n      prevNativeSelectValue !== undefined &&\n      // Проверяем, что предыдущее значение не NOT_SELECTED.NATIVE(если до этого было уже сброшенное значение)\n      prevNativeSelectValue !== NOT_SELECTED.NATIVE;\n\n    const shouldCallOnChange =\n      !isCalledWithSameControlledOptionValue && (isNativeValueChanged || isTriggeredByClearButton);\n\n    if (!shouldCallOnChange) {\n      return;\n    }\n\n    const remappedNativeValue = remapFromNativeValueToSelectValue(e.currentTarget.value);\n\n    if (e.target.value === NOT_SELECTED.NATIVE) {\n      e.target.value = '';\n    }\n    if (e.currentTarget.value === NOT_SELECTED.NATIVE) {\n      e.currentTarget.value = '';\n    }\n\n    onChange?.(e, remappedNativeValue);\n  };\n\n  return {\n    selectedOptionValue,\n    setSelectedOptionValue,\n    nativeSelectValue,\n    setNativeSelectValue: _setNativeSelectValue,\n    onNativeSelectChange,\n  };\n}\n"],"names":["React","useStateWithPrev","NOT_SELECTED","remapFromNativeValueToSelectValue","remapFromSelectValueToNativeValue","useSelectedOptionController","value","defaultValue","isControlledOutside","allowClearButton","onChange","nativeSelectValue","prevNativeSelectValue","setNativeSelectValue","undefined","NATIVE","nativeSelectValueRef","useRef","selectedOptionValue","setSelectedOptionValue","useState","_setNativeSelectValue","useCallback","newValue","current","useEffect","syncNativeSelectValueWithPropValue","syncNativeSelectValueWithSelectedOptionValue","remappedSelectedValue","onNativeSelectChange","e","convertedNativeSelectValue","String","isCalledWithSameControlledOptionValue","isNativeValueChanged","isTriggeredByClearButton","shouldCallOnChange","remappedNativeValue","currentTarget","target"],"mappings":"AACA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,gBAAgB,QAAQ,qCAAkC;AACnE,SAEEC,YAAY,EACZC,iCAAiC,EACjCC,iCAAiC,QAE5B,qCAAkC;AASzC,qCAAqC,GAErC,OAAO,SAASC,4BAA4B,EAC1CC,KAAK,EACLC,YAAY,EACZC,mBAAmB,EACnBC,gBAAgB,EAChBC,QAAQ,EACyB;IACjC,MAAM,CAAC,CAACC,mBAAmBC,sBAAsB,EAAEC,qBAAqB,GACtEZ,iBAAoC;QAClC,IAAIK,UAAUQ,WAAW;YACvB,OAAOV,kCAAkCE;QAC3C;QACA,IAAIC,iBAAiBO,WAAW;YAC9B,OAAOV,kCAAkCG;QAC3C;QACA,OAAOL,aAAaa,MAAM;IAC5B;IACF,MAAMC,uBAAuBhB,MAAMiB,MAAM,CAAoBN;IAE7D,MAAM,CAACO,qBAAqBC,uBAAuB,GAAGnB,MAAMoB,QAAQ,CAAc,IAChFjB,kCAAkCQ;IAGpC,MAAMU,wBAAwBrB,MAAMsB,WAAW,CAC7C,CAACC;QACCV,qBAAqBU;QACrBP,qBAAqBQ,OAAO,GAAGD;IACjC,GACA;QAACV;KAAqB;IAGxBb,MAAMyB,SAAS,CACb,SAASC;QACP,IAAIpB,UAAUQ,WAAW;YACvBO,sBAAsBjB,kCAAkCE;QAC1D;IACF,GACA;QAACA;QAAOe;KAAsB;IAGhCrB,MAAMyB,SAAS,CACb,SAASE;QACP,MAAMC,wBAAwBxB,kCAAkCc;QAChE,IAAIF,qBAAqBQ,OAAO,KAAKI,uBAAuB;YAC1Df,qBAAqBe;QACvB;IACF,GACA;QAACV;QAAqBL;KAAqB;IAG7C,MAAMgB,uBAAoE,CAACC;QACzE,gFAAgF;QAChF,sEAAsE;QACtE,wEAAwE;QACxE,sCAAsC;QACtC,EAAE;QACF,qEAAqE;QACrE,oHAAoH;QACpH,uDAAuD;QACvD,6DAA6D;QAC7D,2IAA2I;QAC3I,iEAAiE;QACjE,4HAA4H;QAC5H,MAAMC,6BACJ,OAAOpB,sBAAsB,YAC5B,CAAA,OAAOL,UAAU,YAAY,OAAOM,0BAA0B,QAAO,IAClEoB,OAAOrB,qBACPA;QAEN,MAAMsB,wCACJzB,uBACAF,UAAUH,kCAAkC4B;QAE9C,MAAMG,uBACJH,+BAA+BnB,yBAAyBA,0BAA0BE;QAEpF,MAAMqB,2BACJ1B,oBACA,oDAAoD;QACpDE,sBAAsBT,aAAaa,MAAM,IACzC,gHAAgH;QAChHH,0BAA0BE,aAC1B,wGAAwG;QACxGF,0BAA0BV,aAAaa,MAAM;QAE/C,MAAMqB,qBACJ,CAACH,yCAA0CC,CAAAA,wBAAwBC,wBAAuB;QAE5F,IAAI,CAACC,oBAAoB;YACvB;QACF;QAEA,MAAMC,sBAAsBlC,kCAAkC2B,EAAEQ,aAAa,CAAChC,KAAK;QAEnF,IAAIwB,EAAES,MAAM,CAACjC,KAAK,KAAKJ,aAAaa,MAAM,EAAE;YAC1Ce,EAAES,MAAM,CAACjC,KAAK,GAAG;QACnB;QACA,IAAIwB,EAAEQ,aAAa,CAAChC,KAAK,KAAKJ,aAAaa,MAAM,EAAE;YACjDe,EAAEQ,aAAa,CAAChC,KAAK,GAAG;QAC1B;QAEAI,WAAWoB,GAAGO;IAChB;IAEA,OAAO;QACLnB;QACAC;QACAR;QACAE,sBAAsBQ;QACtBQ;IACF;AACF"}
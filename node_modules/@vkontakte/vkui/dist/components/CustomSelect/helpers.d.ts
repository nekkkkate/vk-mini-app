import { type SelectValue } from '../NativeSelect/NativeSelect';
import { type SelectProps } from './CustomSelect';
import { type CustomSelectOptionInterface } from './types';
export declare const findIndexAfter: (options?: CustomSelectOptionInterface[], startIndex?: number) => number;
export declare const findIndexBefore: (options?: CustomSelectOptionInterface[], endIndex?: number) => number;
export declare const checkOptionsValueType: <T extends CustomSelectOptionInterface>(options: T[]) => void;
export declare const checkMixControlledAndUncontrolledState: (oldIsControlled: boolean, newIsControlled: boolean) => void;
export declare function findSelectedIndex<T extends CustomSelectOptionInterface>(options: T[] | undefined, value: SelectValue): number;
export declare function getOptionByValue<T extends CustomSelectOptionInterface>(options: T[] | undefined, value: SelectValue): T | null;
export declare const filter: <T extends CustomSelectOptionInterface>(options: SelectProps<T>["options"], inputValue: string, filterFn: SelectProps<T>["filterFn"]) => T[];
export declare function calculateInputValueFromOptions<T extends CustomSelectOptionInterface>(options: T[] | undefined, selectValue: SelectValue): string;
//# sourceMappingURL=helpers.d.ts.map
export declare function parse(input: string, format: string, referenceDate?: Date): Date;
export declare const convertDateToTimeZone: (date?: Date | null, timezone?: string) => Date | undefined | null;
export declare const convertDateFromTimeZone: (date?: Date | null, timezone?: string) => Date | undefined | null;
export declare const dateFormatter: Intl.DateTimeFormat;
declare class DateTimeFormat extends Intl.DateTimeFormat {
    constructor();
    format(date?: Date | number): string;
}
export declare const dateTimeFormatter: DateTimeFormat;
/**
 * Возвращает дату конца месяца
 */
export declare function endOfMonth(date: Date): Date;
export declare function endOfDay(date: Date): Date;
/**
 * Проверяет, что переданные даты относятся к одному и тому же месяцу
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { isSameMonth } from './date.ts';
 *
 * const d1 = new Date();
 * const d2 = new Date();
 * assert.ok(isSameMonth(d1, d2));
 * ```
 */
export declare function isSameMonth(d1: Date, d2: Date): boolean;
export declare function isLastDayOfMonth(date: Date): boolean;
export declare function isWithinInterval(date: Date, interval: [Date, Date]): boolean;
export declare function isToday(date: Date): boolean;
export declare function isYesterday(date: Date): boolean;
export declare function isMatch(input: string, format: string): boolean;
export declare const millisecondsInSecond = 1000;
export {};
//# sourceMappingURL=date.d.ts.map